name: Deploy to EC2 and RDS

on:
  push:
    branches: [ dev ]

env:
  DOCKER_IMAGE_TAG_NAME: front

jobs:
  build-and-docker-push:
    runs-on: ubuntu-22.04

    # 실행 스텝 지정
    steps:
      - uses: actions/checkout@v3

      #  version 지정
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '17'

      # Vue 프로젝트 의존성 설치
      - name: Install dependencies
        run: npm install

      # Vue 프로젝트 Build
      - name: Build Vue.js project
        run: npm run build

      # Docker Image 빌드
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest

      # Docker 로큰
      - name: Login to Docker Hub using Access Token
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      # 이미지 푸시
      - name: Push the Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

  #      - name: Login to Docker Hub
  #        uses: docker/login-action@v3
  #        with:
  #          username: ${{ secrets.DOCKERHUB_USERNAME }}
  #          password: ${{ secrets.DOCKERHUB_TOKEN }}
  #
  #      - name: Set up Docker Builds
  #        uses: docker/setup-buildx-action@v3
  #
  #      - name: Build and push
  #        uses: docker/build-push-action@v6
  #        with:
  #          context: .
  #          file: Dockerfile
  #          push: true
  #          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest


  deploy-to-ec2:
    needs: build-and-docker-push # 위의 build-and-docker-push 이 끝나고 실행
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # 기존에 실행 중인 컨테이너가 있다면 종료 및 제거
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=80-80")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            # 최신 이미지 가져오기
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest

            #Nginx를 사용하여 Vue.js 프로젝트를 서빙
            sudo docker run -d -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest